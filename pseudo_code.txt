Dominic Cork
Apriori Algorithm Pseudo code

Input: 
  filename: the name of the transaction file
  min_support: minimum support percentage (as a threshold)

1. Read the input file and convert it into a list of transactions
    Initialize transactions as a list
    For each line in the file:
        Split the line into items
        Add the list of items to transactions

2. Calculate min_support_count:
    min_support_count = (min_support / 100) * total number of transactions

3. Generate candidate 1-itemsets (C1):
    Initialize C1 as an empty dictionary
    For each transaction in transactions:
        For each item in the transaction:
            If item is already in C1:
                Increment its count by 1
            Else:
                Add item to C1 with count 1

4. Prune C1 to create frequent 1-itemsets (L1):
    Initialize L1 as an empty dictionary
    For each itemset in C1:
        If its count is greater than or equal to min_support_count:
            Add it to L1

5. Initialize k = 2 (for generating larger itemsets)

6. Repeat until no frequent itemsets can be generated:
    a. Generate candidate k-itemsets (Ck) from L(k-1):
        Ck = Join itemsets in L(k-1) (all pairs of frequent (k-1)-itemsets)
        Prune Ck by removing any k-itemset that has an infrequent (k-1)-subset

    b. Count the support of each candidate k-itemset in Ck:
        Initialize support counts for each k-itemset in Ck
        For each transaction in transactions:
            For each candidate itemset in Ck:
                If candidate itemset is a subset of the transaction:
                    Increment its count

    c. Prune Ck to create frequent k-itemsets (Lk):
        Initialize Lk as an empty dictionary
        For each itemset in Ck:
            If its count is greater than or equal to min_support_count:
                Add it to Lk

    d. Set L(k-1) = Lk and increment k by 1

7. Output all frequent itemsets from L1, L2, ..., Lk
