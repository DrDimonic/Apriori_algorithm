Apriori Algorithm Pseudo code
    Input:
        - filename: path to file containing transactions
    Output:
        - frequent itemsets with their support count

    1. Read the transaction data from 'filename'
        - transactions = []
        - For each line in file:
            - split the line by spaces and append to transactions list
        - total_transactions = len(transactions)

    2. Calculate the minimum support count
        - min_support_count = (min_support_percentage / 100) * total_transactions

    3. Generate candidate itemsets of size 1 (C1)
        - C1 = {}
        - For each transaction in transactions:
            - For each item in transaction:
                - If item in C1:
                    - Increment its count by 1
                - Else:
                    - Add item to C1 with count 1

    4. Filter C1 to get frequent 1-itemsets (L1)
        - L1 = {itemset: count for itemset, count in C1.items() if count >= min_support_count}

    5. Initialize:
        - k = 2 (for 2-itemsets and larger)
        - frequent_itemsets = L1

    6. While Lk-1 is not empty:
        - Generate candidate k-itemsets (Ck) from Lk-1:
            - For each pair of frequent (k-1)-itemsets in Lk-1:
                - Combine the two itemsets to form a candidate k-itemset
                - Ensure the new candidate is of size k and is lexicographically ordered
            - Ck = {}

        - For each candidate itemset in Ck:
            - Count the frequency in transactions:
                - For each transaction:
                    - If the candidate itemset is a subset of the transaction:
                        - Increment the count of the candidate

        - Filter Ck to get Lk (frequent k-itemsets):
            - Lk = {itemset: count for itemset, count in Ck.items() if count >= min_support_count}

        - Add Lk to frequent_itemsets
        - Increment k by 1

    7. Output all frequent itemsets in frequent_itemsets 
